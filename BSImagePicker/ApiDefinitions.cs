using System;
using BSImagePicker;
using CoreGraphics;
using Foundation;
using ObjCRuntime;
using Photos;
using UIKit;

namespace Binding
{
	// @interface AssetStore : NSObject
	[BaseType (typeof(NSObject), Name = "_TtC13BSImagePicker10AssetStore")]
	[DisableDefaultCtor]
	interface AssetStore
	{
		// @property (readonly, copy, nonatomic) NSArray<PHAsset *> * _Nonnull assets;
		[Export ("assets", ArgumentSemantic.Copy)]
		PHAsset[] Assets { get; }

		// -(instancetype _Nonnull)initWithAssets:(NSArray<PHAsset *> * _Nonnull)assets __attribute__((objc_designated_initializer));
		[Export ("initWithAssets:")]
		[DesignatedInitializer]
		IntPtr Constructor (PHAsset[] assets);

		// @property (readonly, nonatomic) NSInteger count;
		[Export ("count")]
		nint Count { get; }
	}

	// @interface ImagePickerController : UINavigationController
	[BaseType (typeof(UINavigationController))]
	interface ImagePickerController
	{
		[Wrap ("WeakImagePickerDelegate")]
		[NullAllowed]
		ImagePickerControllerDelegate ImagePickerDelegate { get; set; }

		// @property (nonatomic, weak) id<ImagePickerControllerDelegate> _Nullable imagePickerDelegate;
		[NullAllowed, Export ("imagePickerDelegate", ArgumentSemantic.Weak)]
		NSObject WeakImagePickerDelegate { get; set; }

		// @property (nonatomic, strong) Settings * _Nonnull settings;
		[Export ("settings", ArgumentSemantic.Strong)]
		Settings Settings { get; set; }

		// @property (nonatomic, strong) UIBarButtonItem * _Nonnull doneButton;
		[Export ("doneButton", ArgumentSemantic.Strong)]
		UIBarButtonItem DoneButton { get; set; }

		// @property (nonatomic, strong) UIBarButtonItem * _Nonnull cancelButton;
		[Export ("cancelButton", ArgumentSemantic.Strong)]
		UIBarButtonItem CancelButton { get; set; }

		// @property (nonatomic, strong) UIButton * _Nonnull albumButton;
		[Export ("albumButton", ArgumentSemantic.Strong)]
		UIButton AlbumButton { get; set; }

		// @property (readonly, copy, nonatomic) NSArray<PHAsset *> * _Nonnull selectedAssets;
		[Export ("selectedAssets", ArgumentSemantic.Copy)]
		PHAsset[] SelectedAssets { get; }

		// @property (copy, nonatomic) NSString * _Nonnull doneButtonTitle;
		[Export ("doneButtonTitle")]
		string DoneButtonTitle { get; set; }

		// -(instancetype _Nonnull)initWithSelectedAssets:(NSArray<PHAsset *> * _Nonnull)selectedAssets __attribute__((objc_designated_initializer));
		[Export ("initWithSelectedAssets:")]
		[DesignatedInitializer]
		IntPtr Constructor (PHAsset[] selectedAssets);

		// -(instancetype _Nullable)initWithCoder:(NSCoder * _Nonnull)aDecoder __attribute__((objc_designated_initializer));
		[Export ("initWithCoder:")]
		[DesignatedInitializer]
		IntPtr Constructor (NSCoder aDecoder);

		// -(void)viewDidLoad;
		[Export ("viewDidLoad")]
		void ViewDidLoad ();
	}

	// @protocol ImagePickerControllerDelegate
	[Protocol, Model (AutoGeneratedName = true)]
	interface ImagePickerControllerDelegate
	{
		// @required -(void)imagePicker:(ImagePickerController * _Nonnull)imagePicker didSelectAsset:(PHAsset * _Nonnull)asset;
		[Abstract]
		[Export ("imagePicker:didSelectAsset:")]
		void DidSelectAsset (ImagePickerController imagePicker, PHAsset asset);

		// @required -(void)imagePicker:(ImagePickerController * _Nonnull)imagePicker didDeselectAsset:(PHAsset * _Nonnull)asset;
		[Abstract]
		[Export ("imagePicker:didDeselectAsset:")]
		void DidDeselectAsset (ImagePickerController imagePicker, PHAsset asset);

		// @required -(void)imagePicker:(ImagePickerController * _Nonnull)imagePicker didFinishWithAssets:(NSArray<PHAsset *> * _Nonnull)assets;
		[Abstract]
		[Export ("imagePicker:didFinishWithAssets:")]
		void DidFinishWithAssets (ImagePickerController imagePicker, PHAsset[] assets);

		// @required -(void)imagePicker:(ImagePickerController * _Nonnull)imagePicker didCancelWithAssets:(NSArray<PHAsset *> * _Nonnull)assets;
		[Abstract]
		[Export ("imagePicker:didCancelWithAssets:")]
		void DidCancelWithAssets (ImagePickerController imagePicker, PHAsset[] assets);

		// @required -(void)imagePicker:(ImagePickerController * _Nonnull)imagePicker didReachSelectionLimit:(NSInteger)count;
		[Abstract]
		[Export ("imagePicker:didReachSelectionLimit:")]
		void DidReachSelectionLimit (ImagePickerController imagePicker, nint count);
	}

	// @interface BSImagePicker_Swift_293 (ImagePickerController) <ImagePickerControllerDelegate>
	[Category]
	[BaseType (typeof(ImagePickerController))]
	interface ImagePickerController_BSImagePicker_Swift_293 : IImagePickerControllerDelegate
	{
		// -(void)imagePicker:(ImagePickerController * _Nonnull)imagePicker didSelectAsset:(PHAsset * _Nonnull)asset;
		[Export ("imagePicker:didSelectAsset:")]
		void ImagePicker (ImagePickerController imagePicker, PHAsset asset);

		// -(void)imagePicker:(ImagePickerController * _Nonnull)imagePicker didDeselectAsset:(PHAsset * _Nonnull)asset;
		[Export ("imagePicker:didDeselectAsset:")]
		void ImagePicker (ImagePickerController imagePicker, PHAsset asset);

		// -(void)imagePicker:(ImagePickerController * _Nonnull)imagePicker didFinishWithAssets:(NSArray<PHAsset *> * _Nonnull)assets;
		[Export ("imagePicker:didFinishWithAssets:")]
		void ImagePicker (ImagePickerController imagePicker, PHAsset[] assets);

		// -(void)imagePicker:(ImagePickerController * _Nonnull)imagePicker didCancelWithAssets:(NSArray<PHAsset *> * _Nonnull)assets;
		[Export ("imagePicker:didCancelWithAssets:")]
		void ImagePicker (ImagePickerController imagePicker, PHAsset[] assets);

		// -(void)imagePicker:(ImagePickerController * _Nonnull)imagePicker didReachSelectionLimit:(NSInteger)count;
		[Export ("imagePicker:didReachSelectionLimit:")]
		void ImagePicker (ImagePickerController imagePicker, nint count);
	}

	// @interface ImageView : UIView
	[BaseType (typeof(UIView), Name = "_TtC13BSImagePicker9ImageView")]
	interface ImageView
	{
		// @property (getter = isUserInteractionEnabled, nonatomic) BOOL userInteractionEnabled;
		[Export ("userInteractionEnabled")]
		bool UserInteractionEnabled { [Bind ("isUserInteractionEnabled")] get; set; }

		// @property (nonatomic, strong) UIColor * _Null_unspecified tintColor;
		[Export ("tintColor", ArgumentSemantic.Strong)]
		UIColor TintColor { get; set; }

		// @property (nonatomic) UIViewContentMode contentMode;
		[Export ("contentMode", ArgumentSemantic.Assign)]
		UIViewContentMode ContentMode { get; set; }

		// -(instancetype _Nonnull)initWithFrame:(CGRect)frame __attribute__((objc_designated_initializer));
		[Export ("initWithFrame:")]
		[DesignatedInitializer]
		IntPtr Constructor (CGRect frame);

		// -(instancetype _Nullable)initWithCoder:(NSCoder * _Nonnull)aDecoder __attribute__((objc_designated_initializer));
		[Export ("initWithCoder:")]
		[DesignatedInitializer]
		IntPtr Constructor (NSCoder aDecoder);

		// -(void)layoutSubviews;
		[Export ("layoutSubviews")]
		void LayoutSubviews ();
	}

	// @interface BSImagePicker_Swift_317 (ImageView)
	[Category]
	[BaseType (typeof(ImageView))]
	interface ImageView_BSImagePicker_Swift_317
	{
		// @property (nonatomic, strong) UIImage * _Nullable image;
		[NullAllowed, Export ("image", ArgumentSemantic.Strong)]
		UIImage Image { get; set; }

		// @property (nonatomic, strong) UIImage * _Nullable highlightedImage;
		[NullAllowed, Export ("highlightedImage", ArgumentSemantic.Strong)]
		UIImage HighlightedImage { get; set; }

		// @property (nonatomic) BOOL isHighlighted;
		[Export ("isHighlighted")]
		bool IsHighlighted { get; set; }
	}

	// @interface Settings : NSObject
	[BaseType (typeof(NSObject))]
	interface Settings
	{
		// @property (nonatomic, strong) Theme * _Nonnull theme;
		[Export ("theme", ArgumentSemantic.Strong)]
		Theme Theme { get; set; }

		// @property (nonatomic, strong) Selection * _Nonnull selection;
		[Export ("selection", ArgumentSemantic.Strong)]
		Selection Selection { get; set; }

		// @property (nonatomic, strong) List * _Nonnull list;
		[Export ("list", ArgumentSemantic.Strong)]
		List List { get; set; }

		// @property (nonatomic, strong) Fetch * _Nonnull fetch;
		[Export ("fetch", ArgumentSemantic.Strong)]
		Fetch Fetch { get; set; }

		// @property (nonatomic, strong) Dismiss * _Nonnull dismiss;
		[Export ("dismiss", ArgumentSemantic.Strong)]
		Dismiss Dismiss { get; set; }

		// @property (nonatomic) BOOL previewEnabled;
		[Export ("previewEnabled")]
		bool PreviewEnabled { get; set; }
	}

	// @interface Theme : NSObject
	[BaseType (typeof(NSObject))]
	interface Theme
	{
		// @property (nonatomic, strong) UIColor * _Nonnull backgroundColor;
		[Export ("backgroundColor", ArgumentSemantic.Strong)]
		UIColor BackgroundColor { get; set; }

		// @property (nonatomic, strong) UIColor * _Nonnull selectionFillColor;
		[Export ("selectionFillColor", ArgumentSemantic.Strong)]
		UIColor SelectionFillColor { get; set; }

		// @property (nonatomic, strong) UIColor * _Nonnull selectionStrokeColor;
		[Export ("selectionStrokeColor", ArgumentSemantic.Strong)]
		UIColor SelectionStrokeColor { get; set; }

		// @property (nonatomic, strong) UIColor * _Nonnull selectionShadowColor;
		[Export ("selectionShadowColor", ArgumentSemantic.Strong)]
		UIColor SelectionShadowColor { get; set; }

		// @property (nonatomic) enum SelectionStyle selectionStyle;
		[Export ("selectionStyle", ArgumentSemantic.Assign)]
		SelectionStyle SelectionStyle { get; set; }

		// @property (copy, nonatomic) NSDictionary<NSAttributedStringKey,id> * _Nonnull previewTitleAttributes;
		[Export ("previewTitleAttributes", ArgumentSemantic.Copy)]
		NSDictionary<NSString, NSObject> PreviewTitleAttributes { get; set; }

		// @property (copy, nonatomic) NSDictionary<NSAttributedStringKey,id> * _Nonnull previewSubtitleAttributes;
		[Export ("previewSubtitleAttributes", ArgumentSemantic.Copy)]
		NSDictionary<NSString, NSObject> PreviewSubtitleAttributes { get; set; }

		// @property (copy, nonatomic) NSDictionary<NSAttributedStringKey,id> * _Nonnull albumTitleAttributes;
		[Export ("albumTitleAttributes", ArgumentSemantic.Copy)]
		NSDictionary<NSString, NSObject> AlbumTitleAttributes { get; set; }
	}

	// @interface Selection : NSObject
	[BaseType (typeof(NSObject))]
	interface Selection
	{
		// @property (nonatomic) NSInteger max;
		[Export ("max")]
		nint Max { get; set; }

		// @property (nonatomic) NSInteger min;
		[Export ("min")]
		nint Min { get; set; }

		// @property (nonatomic) BOOL unselectOnReachingMax;
		[Export ("unselectOnReachingMax")]
		bool UnselectOnReachingMax { get; set; }
	}

	// @interface List : NSObject
	[BaseType (typeof(NSObject))]
	interface List
	{
		// @property (nonatomic) CGFloat spacing;
		[Export ("spacing")]
		nfloat Spacing { get; set; }

		// @property (copy, nonatomic) NSInteger (^ _Nonnull)(UIUserInterfaceSizeClass, UIUserInterfaceSizeClass) cellsPerRow;
		[Export ("cellsPerRow", ArgumentSemantic.Copy)]
		Func<UIUserInterfaceSizeClass, UIUserInterfaceSizeClass, nint> CellsPerRow { get; set; }
	}

	// @interface Fetch : NSObject
	[BaseType (typeof(NSObject))]
	interface Fetch
	{
		// @property (nonatomic, strong) Album * _Nonnull album;
		[Export ("album", ArgumentSemantic.Strong)]
		Album Album { get; set; }

		// @property (nonatomic, strong) Assets * _Nonnull assets;
		[Export ("assets", ArgumentSemantic.Strong)]
		Assets Assets { get; set; }

		// @property (nonatomic, strong) Preview * _Nonnull preview;
		[Export ("preview", ArgumentSemantic.Strong)]
		Preview Preview { get; set; }
	}

	// @interface Album : NSObject
	[BaseType (typeof(NSObject))]
	interface Album
	{
		// @property (nonatomic, strong) PHFetchOptions * _Nonnull options;
		[Export ("options", ArgumentSemantic.Strong)]
		PHFetchOptions Options { get; set; }

		// @property (copy, nonatomic) NSArray<PHFetchResult<PHAssetCollection *> *> * _Nonnull fetchResults;
		[Export ("fetchResults", ArgumentSemantic.Copy)]
		PHFetchResult<PHAssetCollection>[] FetchResults { get; set; }
	}

	// @interface Assets : NSObject
	[BaseType (typeof(NSObject))]
	interface Assets
	{
		// @property (nonatomic) BOOL imageTypesSupported;
		[Export ("imageTypesSupported")]
		bool ImageTypesSupported { get; set; }

		// @property (nonatomic) BOOL videoTypesSupported;
		[Export ("videoTypesSupported")]
		bool VideoTypesSupported { get; set; }

		// @property (nonatomic, strong) PHFetchOptions * _Nonnull options;
		[Export ("options", ArgumentSemantic.Strong)]
		PHFetchOptions Options { get; set; }
	}

	// @interface Preview : NSObject
	[BaseType (typeof(NSObject))]
	interface Preview
	{
		// @property (nonatomic, strong) PHImageRequestOptions * _Nonnull photoOptions;
		[Export ("photoOptions", ArgumentSemantic.Strong)]
		PHImageRequestOptions PhotoOptions { get; set; }

		// @property (nonatomic, strong) PHLivePhotoRequestOptions * _Nonnull livePhotoOptions;
		[Export ("livePhotoOptions", ArgumentSemantic.Strong)]
		PHLivePhotoRequestOptions LivePhotoOptions { get; set; }

		// @property (nonatomic, strong) PHVideoRequestOptions * _Nonnull videoOptions;
		[Export ("videoOptions", ArgumentSemantic.Strong)]
		PHVideoRequestOptions VideoOptions { get; set; }
	}

	// @interface Dismiss : NSObject
	[BaseType (typeof(NSObject))]
	interface Dismiss
	{
		// @property (nonatomic) BOOL enabled;
		[Export ("enabled")]
		bool Enabled { get; set; }
	}

	// @interface BSImagePicker_Swift_462 (UIViewController)
	[Category]
	[BaseType (typeof(UIViewController))]
	interface UIViewController_BSImagePicker_Swift_462
	{
		// -(void)presentImagePicker:(ImagePickerController * _Nonnull)imagePicker animated:(BOOL)animated select:(void (^ _Nullable)(PHAsset * _Nonnull))select deselect:(void (^ _Nullable)(PHAsset * _Nonnull))deselect cancel:(void (^ _Nullable)(NSArray<PHAsset *> * _Nonnull))cancel finish:(void (^ _Nullable)(NSArray<PHAsset *> * _Nonnull))finish completion:(void (^ _Nullable)(void))completion;
		[Export ("presentImagePicker:animated:select:deselect:cancel:finish:completion:")]
		void PresentImagePicker (ImagePickerController imagePicker, bool animated, [NullAllowed] Action<PHAsset> select, [NullAllowed] Action<PHAsset> deselect, [NullAllowed] Action<NSArray<PHAsset>> cancel, [NullAllowed] Action<NSArray<PHAsset>> finish, [NullAllowed] Action completion);
	}
}
